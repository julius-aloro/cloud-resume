stages:
  - plan
  - apply
  - file_upload
  - invalidation
  - testing

variables:
  PLANFILE: "plan.tfplan"
  
cache:
  paths:
    - site/
  
# 1st job (check/verify version of terraform used)

terraform_version_check:
  image:
    name: registry.gitlab.com/julius.aloro/my-cloud-resume/terraform:1.10
    entrypoint: [""]
  stage: plan
  script:
    - terraform version

# 2nd job (perform terraform plan, output planfile to be used in apply stage)

terraform_plan:
  image:
    name: registry.gitlab.com/julius.aloro/my-cloud-resume/terraform:1.10
    entrypoint: [""]
  stage: plan
  script:
    - cd infra/
    - terraform init
    - terraform plan -out=$PLANFILE
    - terraform show $PLANFILE
  artifacts:
    paths:
      - infra/
    untracked: false
    when: on_success
    access: all

# 3rd job (perform terraform build)

terraform_build:
  dependencies:
    - terraform_plan
  image:
    name: registry.gitlab.com/julius.aloro/my-cloud-resume/terraform:1.10
    entrypoint: [""]
  stage: apply
  script:
    - cd infra/
    - terraform apply --auto-approve $PLANFILE
    - terraform output -json > outputs.json
    - cat outputs.json
  artifacts:
    paths:
      - infra/
    untracked: false
    when: on_success
    access: all
  
# 4th job (Upload files to s3 [site folder])

file_upload_to_s3:
  dependencies:
    - terraform_build
  image: 
   name: registry.gitlab.com/julius.aloro/my-cloud-resume/amazon/aws-cli:2.22.14
   entrypoint: [""]
  stage: file_upload
  script:
    - yum install jq -y
    - export S3_BUCKET_NAME=$(jq -r ".s3_bucket_id.value" infra/outputs.json)
    - aws s3 sync site/ s3://$S3_BUCKET_NAME/ --delete --exact-timestamps > invalidate.file
    - echo "Displaying S3 bucket files..."
    - aws s3 ls s3://$S3_BUCKET_NAME/
    - cat invalidate.file

# create invalidation
# output cloudfront distribution name and variablize